<?xml version="1.0" encoding="utf-8"?>
<TestRun id="699eb8b9-6532-49b5-b198-4ef726ec2f6d" name="@KFV7CQCRXT 2025-06-06 17:33:11" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <Times creation="2025-06-06T17:33:11.8803760+01:00" queuing="2025-06-06T17:33:11.8803760+01:00" start="2025-06-06T17:33:10.0646430+01:00" finish="2025-06-06T17:33:11.9252020+01:00" />
  <TestSettings name="default" id="6725834a-84b9-4c99-9c43-c3973792de77">
    <Deployment runDeploymentRoot="_KFV7CQCRXT_2025-06-06_17_33_11" />
  </TestSettings>
  <Results>
    <UnitTestResult executionId="fab6c1e8-c7c5-4e53-91f0-096796a519f6" testId="b9ae3c40-f417-8888-87f6-6fc93cb2990b" testName="ECommerce.Pact.ConsumerTests.CustomerConsumerTests.GetAllCustomers_ShouldReturnEmptyList_WhenNoCustomersExist" computerName="KFV7CQCRXT" duration="00:00:00.0139084" startTime="2025-06-06T17:33:11.8809980+01:00" endTime="2025-06-06T17:33:11.8809980+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fab6c1e8-c7c5-4e53-91f0-096796a519f6">
      <Output>
        <StdOut>Mock driver logs:

2025-06-06T16:33:11.870057Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Creating pact request from hyper request
2025-06-06T16:33:11.870059Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Extracting query from uri /modulith/customers
2025-06-06T16:33:11.870073Z  INFO tokio-runtime-worker pact_mock_server::hyper_server: Received request HTTP Request ( method: GET, path: /modulith/customers, query: None, headers: Some({"host": ["127.0.0.1:9222"], "authorization": ["Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token"]}), body: Empty )
2025-06-06T16:33:11.870090Z  INFO tokio-runtime-worker pact_matching: comparing to expected HTTP Request ( method: GET, path: /modulith/customers, query: None, headers: Some({"Authorization": ["Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token"]}), body: Missing )
2025-06-06T16:33:11.870092Z DEBUG tokio-runtime-worker pact_matching:      body: ''
2025-06-06T16:33:11.870093Z DEBUG tokio-runtime-worker pact_matching:      matching_rules: MatchingRules { rules: {PATH: MatchingRuleCategory { name: PATH, rules: {} }, HEADER: MatchingRuleCategory { name: HEADER, rules: {} }} }
2025-06-06T16:33:11.870096Z DEBUG tokio-runtime-worker pact_matching:      generators: Generators { categories: {} }
2025-06-06T16:33:11.870102Z DEBUG tokio-runtime-worker pact_matching::matchers: String -&gt; String: comparing '/modulith/customers' to '/modulith/customers' ==&gt; true cascaded=false matcher=Equality
2025-06-06T16:33:11.870106Z DEBUG tokio-runtime-worker pact_matching: expected content type = '*/*', actual content type = '*/*'
2025-06-06T16:33:11.870114Z DEBUG tokio-runtime-worker pact_matching: content type header matcher = 'RuleList { rules: [], rule_logic: And, cascaded: false }'
2025-06-06T16:33:11.870123Z DEBUG tokio-runtime-worker pact_matching::matchers: String -&gt; String: comparing 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token' to 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token' ==&gt; true cascaded=false matcher=Equality
2025-06-06T16:33:11.870127Z DEBUG tokio-runtime-worker pact_matching: --&gt; Mismatches: []
2025-06-06T16:33:11.870143Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Test context = {"mockServer": Object {"href": String("http://127.0.0.1:9222"), "port": Number(9222)}}
2025-06-06T16:33:11.870148Z  INFO tokio-runtime-worker pact_mock_server::hyper_server: Request matched, sending response HTTP Response ( status: 200, headers: Some({"Content-Type": ["application/json"]}), body: Present(2 bytes, application/json) )
2025-06-06T16:33:11.870151Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server:      body: '[]'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="917efe4d-deec-4e36-bd61-bd510eb368c4" testId="2378a2a8-282b-aebf-10c3-18e3198004e5" testName="ECommerce.Pact.ConsumerTests.CustomerConsumerTests.UpdateCustomer_ShouldReturnBadRequest_WhenInvalidDataProvided" computerName="KFV7CQCRXT" duration="00:00:01.1243142" startTime="2025-06-06T17:33:11.6971040+01:00" endTime="2025-06-06T17:33:11.6971150+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="917efe4d-deec-4e36-bd61-bd510eb368c4">
      <Output>
        <StdOut>Mock driver logs:

2025-06-06T16:33:11.676547Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Creating pact request from hyper request
2025-06-06T16:33:11.676552Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Extracting query from uri /modulith/customers/7b13da4c-577a-4fe8-8172-00893e2ceede
2025-06-06T16:33:11.676652Z  INFO tokio-runtime-worker pact_mock_server::hyper_server: Received request HTTP Request ( method: PUT, path: /modulith/customers/7b13da4c-577a-4fe8-8172-00893e2ceede, query: None, headers: Some({"authorization": ["Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token"], "host": ["127.0.0.1:9222"], "content-type": ["application/json; charset=utf-8"], "content-length": ["34"]}), body: Present(34 bytes, application/json;charset=utf-8) )
2025-06-06T16:33:11.676717Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server:      body: '{"name":"","email":"not-an-email"}'
2025-06-06T16:33:11.676794Z  INFO tokio-runtime-worker pact_matching: comparing to expected HTTP Request ( method: PUT, path: /modulith/customers/7b13da4c-577a-4fe8-8172-00893e2ceede, query: None, headers: Some({"Authorization": ["Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token"], "Content-Type": ["application/json"]}), body: Present(34 bytes, application/json) )
2025-06-06T16:33:11.676797Z DEBUG tokio-runtime-worker pact_matching:      body: '{"email":"not-an-email","name":""}'
2025-06-06T16:33:11.676798Z DEBUG tokio-runtime-worker pact_matching:      matching_rules: MatchingRules { rules: {HEADER: MatchingRuleCategory { name: HEADER, rules: {} }, PATH: MatchingRuleCategory { name: PATH, rules: {} }, BODY: MatchingRuleCategory { name: BODY, rules: {} }} }
2025-06-06T16:33:11.676801Z DEBUG tokio-runtime-worker pact_matching:      generators: Generators { categories: {} }
2025-06-06T16:33:11.676855Z DEBUG tokio-runtime-worker pact_matching::matchers: String -&gt; String: comparing '/modulith/customers/7b13da4c-577a-4fe8-8172-00893e2ceede' to '/modulith/customers/7b13da4c-577a-4fe8-8172-00893e2ceede' ==&gt; true cascaded=false matcher=Equality
2025-06-06T16:33:11.676908Z DEBUG tokio-runtime-worker pact_matching: expected content type = 'application/json', actual content type = 'application/json;charset=utf-8'
2025-06-06T16:33:11.676924Z DEBUG tokio-runtime-worker pact_matching: content type header matcher = 'RuleList { rules: [], rule_logic: And, cascaded: false }'
2025-06-06T16:33:11.676938Z DEBUG tokio-runtime-worker pact_plugin_driver::catalogue_manager: Looking for a content matcher for application/json
2025-06-06T16:33:11.677219Z DEBUG tokio-runtime-worker pact_matching: No content matcher defined for content type 'application/json', using core matcher implementation
2025-06-06T16:33:11.677222Z DEBUG tokio-runtime-worker pact_matching: Using body matcher for content type 'application/json'
2025-06-06T16:33:11.677299Z DEBUG tokio-runtime-worker pact_matching::json: compare: Comparing path $
2025-06-06T16:33:11.677313Z DEBUG tokio-runtime-worker pact_matching::json: compare_maps: Comparing maps at $: {"email": String("not-an-email"), "name": String("")} -&gt; {"email": String("not-an-email"), "name": String("")}
2025-06-06T16:33:11.677397Z DEBUG tokio-runtime-worker pact_matching::json: compare: Comparing path $.email
2025-06-06T16:33:11.677399Z DEBUG tokio-runtime-worker pact_matching::json: JSON -&gt; JSON: Comparing '"not-an-email"' to '"not-an-email"' using Equality -&gt; Ok(())
2025-06-06T16:33:11.677401Z DEBUG tokio-runtime-worker pact_matching::json: compare_values: Comparing 'String("not-an-email")' to 'String("not-an-email")' at path '$.email' -&gt; Ok(())
2025-06-06T16:33:11.677403Z DEBUG tokio-runtime-worker pact_matching::json: compare: Comparing path $.name
2025-06-06T16:33:11.677404Z DEBUG tokio-runtime-worker pact_matching::json: JSON -&gt; JSON: Comparing '""' to '""' using Equality -&gt; Ok(())
2025-06-06T16:33:11.677405Z DEBUG tokio-runtime-worker pact_matching::json: compare_values: Comparing 'String("")' to 'String("")' at path '$.name' -&gt; Ok(())
2025-06-06T16:33:11.677426Z DEBUG tokio-runtime-worker pact_matching::matchers: String -&gt; String: comparing 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token' to 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token' ==&gt; true cascaded=false matcher=Equality
2025-06-06T16:33:11.677438Z DEBUG tokio-runtime-worker pact_matching: --&gt; Mismatches: []
2025-06-06T16:33:11.677521Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Test context = {"mockServer": Object {"href": String("http://127.0.0.1:9222"), "port": Number(9222)}}
2025-06-06T16:33:11.677539Z  INFO tokio-runtime-worker pact_mock_server::hyper_server: Request matched, sending response HTTP Response ( status: 400, headers: Some({"Content-Type": ["application/json"]}), body: Present(18 bytes, application/json) )
2025-06-06T16:33:11.677541Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server:      body: '"Validation error"'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="29745fab-7c41-4bc3-b812-f6b9f72e5f5e" testId="8a35a436-f559-8731-3662-d4c52c540b62" testName="ECommerce.Pact.ConsumerTests.CustomerConsumerTests.GetCustomerById_ShouldReturnUnauthorized_WhenNoAuthorizationProvided" computerName="KFV7CQCRXT" duration="00:00:00.0104383" startTime="2025-06-06T17:33:11.8916140+01:00" endTime="2025-06-06T17:33:11.8916150+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="29745fab-7c41-4bc3-b812-f6b9f72e5f5e">
      <Output>
        <StdOut>Mock driver logs:

2025-06-06T16:33:11.886347Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Creating pact request from hyper request
2025-06-06T16:33:11.886352Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Extracting query from uri /modulith/customers/262d65f6-303a-4344-9714-9c107541fb9f
2025-06-06T16:33:11.886367Z  INFO tokio-runtime-worker pact_mock_server::hyper_server: Received request HTTP Request ( method: GET, path: /modulith/customers/262d65f6-303a-4344-9714-9c107541fb9f, query: None, headers: Some({"host": ["127.0.0.1:9222"]}), body: Empty )
2025-06-06T16:33:11.886384Z  INFO tokio-runtime-worker pact_matching: comparing to expected HTTP Request ( method: GET, path: /modulith/customers/262d65f6-303a-4344-9714-9c107541fb9f, query: None, headers: None, body: Missing )
2025-06-06T16:33:11.886386Z DEBUG tokio-runtime-worker pact_matching:      body: ''
2025-06-06T16:33:11.886387Z DEBUG tokio-runtime-worker pact_matching:      matching_rules: MatchingRules { rules: {PATH: MatchingRuleCategory { name: PATH, rules: {} }} }
2025-06-06T16:33:11.886390Z DEBUG tokio-runtime-worker pact_matching:      generators: Generators { categories: {} }
2025-06-06T16:33:11.886396Z DEBUG tokio-runtime-worker pact_matching::matchers: String -&gt; String: comparing '/modulith/customers/262d65f6-303a-4344-9714-9c107541fb9f' to '/modulith/customers/262d65f6-303a-4344-9714-9c107541fb9f' ==&gt; true cascaded=false matcher=Equality
2025-06-06T16:33:11.886399Z DEBUG tokio-runtime-worker pact_matching: expected content type = '*/*', actual content type = '*/*'
2025-06-06T16:33:11.886409Z DEBUG tokio-runtime-worker pact_matching: content type header matcher = 'RuleList { rules: [], rule_logic: And, cascaded: false }'
2025-06-06T16:33:11.886413Z DEBUG tokio-runtime-worker pact_matching: --&gt; Mismatches: []
2025-06-06T16:33:11.886426Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Test context = {"mockServer": Object {"href": String("http://127.0.0.1:9222"), "port": Number(9222)}}
2025-06-06T16:33:11.886443Z  INFO tokio-runtime-worker pact_mock_server::hyper_server: Request matched, sending response HTTP Response ( status: 401, headers: None, body: Missing )</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b3e217d4-33d5-43c6-8121-baab18257517" testId="f7cce972-ed99-cf06-afec-2ff3004f75bd" testName="ECommerce.Pact.ConsumerTests.CustomerConsumerTests.CreateCustomer_ShouldReturnBadRequest_WhenInvalidCustomerIsProvided" computerName="KFV7CQCRXT" duration="00:00:00.0045714" startTime="2025-06-06T17:33:11.7020490+01:00" endTime="2025-06-06T17:33:11.7020490+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b3e217d4-33d5-43c6-8121-baab18257517">
      <Output>
        <StdOut>Mock driver logs:

2025-06-06T16:33:11.700029Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Creating pact request from hyper request
2025-06-06T16:33:11.700031Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Extracting query from uri /modulith/customers
2025-06-06T16:33:11.700051Z  INFO tokio-runtime-worker pact_mock_server::hyper_server: Received request HTTP Request ( method: POST, path: /modulith/customers, query: None, headers: Some({"authorization": ["Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token"], "content-length": ["35"], "content-type": ["application/json; charset=utf-8"], "host": ["127.0.0.1:9222"]}), body: Present(35 bytes, application/json;charset=utf-8) )
2025-06-06T16:33:11.700060Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server:      body: '{"name":"","email":"invalid-email"}'
2025-06-06T16:33:11.700075Z  INFO tokio-runtime-worker pact_matching: comparing to expected HTTP Request ( method: POST, path: /modulith/customers, query: None, headers: Some({"Content-Type": ["application/json"], "Authorization": ["Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token"]}), body: Present(35 bytes, application/json) )
2025-06-06T16:33:11.700078Z DEBUG tokio-runtime-worker pact_matching:      body: '{"email":"invalid-email","name":""}'
2025-06-06T16:33:11.700079Z DEBUG tokio-runtime-worker pact_matching:      matching_rules: MatchingRules { rules: {HEADER: MatchingRuleCategory { name: HEADER, rules: {} }, BODY: MatchingRuleCategory { name: BODY, rules: {} }, PATH: MatchingRuleCategory { name: PATH, rules: {} }} }
2025-06-06T16:33:11.700081Z DEBUG tokio-runtime-worker pact_matching:      generators: Generators { categories: {} }
2025-06-06T16:33:11.700087Z DEBUG tokio-runtime-worker pact_matching::matchers: String -&gt; String: comparing '/modulith/customers' to '/modulith/customers' ==&gt; true cascaded=false matcher=Equality
2025-06-06T16:33:11.700090Z DEBUG tokio-runtime-worker pact_matching: expected content type = 'application/json', actual content type = 'application/json;charset=utf-8'
2025-06-06T16:33:11.700097Z DEBUG tokio-runtime-worker pact_matching: content type header matcher = 'RuleList { rules: [], rule_logic: And, cascaded: false }'
2025-06-06T16:33:11.700100Z DEBUG tokio-runtime-worker pact_plugin_driver::catalogue_manager: Looking for a content matcher for application/json
2025-06-06T16:33:11.700296Z DEBUG tokio-runtime-worker pact_matching: No content matcher defined for content type 'application/json', using core matcher implementation
2025-06-06T16:33:11.700297Z DEBUG tokio-runtime-worker pact_matching: Using body matcher for content type 'application/json'
2025-06-06T16:33:11.700303Z DEBUG tokio-runtime-worker pact_matching::json: compare: Comparing path $
2025-06-06T16:33:11.700304Z DEBUG tokio-runtime-worker pact_matching::json: compare_maps: Comparing maps at $: {"email": String("invalid-email"), "name": String("")} -&gt; {"email": String("invalid-email"), "name": String("")}
2025-06-06T16:33:11.700315Z DEBUG tokio-runtime-worker pact_matching::json: compare: Comparing path $.email
2025-06-06T16:33:11.700317Z DEBUG tokio-runtime-worker pact_matching::json: JSON -&gt; JSON: Comparing '"invalid-email"' to '"invalid-email"' using Equality -&gt; Ok(())
2025-06-06T16:33:11.700319Z DEBUG tokio-runtime-worker pact_matching::json: compare_values: Comparing 'String("invalid-email")' to 'String("invalid-email")' at path '$.email' -&gt; Ok(())
2025-06-06T16:33:11.700321Z DEBUG tokio-runtime-worker pact_matching::json: compare: Comparing path $.name
2025-06-06T16:33:11.700322Z DEBUG tokio-runtime-worker pact_matching::json: JSON -&gt; JSON: Comparing '""' to '""' using Equality -&gt; Ok(())
2025-06-06T16:33:11.700323Z DEBUG tokio-runtime-worker pact_matching::json: compare_values: Comparing 'String("")' to 'String("")' at path '$.name' -&gt; Ok(())
2025-06-06T16:33:11.700341Z DEBUG tokio-runtime-worker pact_matching::matchers: String -&gt; String: comparing 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token' to 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token' ==&gt; true cascaded=false matcher=Equality
2025-06-06T16:33:11.700345Z DEBUG tokio-runtime-worker pact_matching: --&gt; Mismatches: []
2025-06-06T16:33:11.700365Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Test context = {"mockServer": Object {"href": String("http://127.0.0.1:9222"), "port": Number(9222)}}
2025-06-06T16:33:11.700370Z  INFO tokio-runtime-worker pact_mock_server::hyper_server: Request matched, sending response HTTP Response ( status: 400, headers: Some({"Content-Type": ["application/json"]}), body: Present(18 bytes, application/json) )
2025-06-06T16:33:11.700372Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server:      body: '"Validation error"'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b7acaca0-2e66-48a6-abf5-a9b259717d02" testId="d19df1d5-6ec7-07f6-16b4-e77b2fc8f297" testName="ECommerce.Pact.ConsumerTests.CustomerConsumerTests.GetCustomerById_ShouldReturnNotFound_WhenCustomerDoesNotExist" computerName="KFV7CQCRXT" duration="00:00:00.0439830" startTime="2025-06-06T17:33:11.7945390+01:00" endTime="2025-06-06T17:33:11.7945390+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b7acaca0-2e66-48a6-abf5-a9b259717d02">
      <Output>
        <StdOut>Mock driver logs:

2025-06-06T16:33:11.752465Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Creating pact request from hyper request
2025-06-06T16:33:11.752466Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Extracting query from uri /modulith/customers/a9f62812-ae0b-4a54-a3e5-94dfc94e54dd
2025-06-06T16:33:11.752479Z  INFO tokio-runtime-worker pact_mock_server::hyper_server: Received request HTTP Request ( method: GET, path: /modulith/customers/a9f62812-ae0b-4a54-a3e5-94dfc94e54dd, query: None, headers: Some({"host": ["127.0.0.1:9222"], "authorization": ["Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token"]}), body: Empty )
2025-06-06T16:33:11.752493Z  INFO tokio-runtime-worker pact_matching: comparing to expected HTTP Request ( method: GET, path: /modulith/customers/a9f62812-ae0b-4a54-a3e5-94dfc94e54dd, query: None, headers: Some({"Authorization": ["Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token"]}), body: Missing )
2025-06-06T16:33:11.752495Z DEBUG tokio-runtime-worker pact_matching:      body: ''
2025-06-06T16:33:11.752496Z DEBUG tokio-runtime-worker pact_matching:      matching_rules: MatchingRules { rules: {PATH: MatchingRuleCategory { name: PATH, rules: {} }, HEADER: MatchingRuleCategory { name: HEADER, rules: {} }} }
2025-06-06T16:33:11.752498Z DEBUG tokio-runtime-worker pact_matching:      generators: Generators { categories: {} }
2025-06-06T16:33:11.752503Z DEBUG tokio-runtime-worker pact_matching::matchers: String -&gt; String: comparing '/modulith/customers/a9f62812-ae0b-4a54-a3e5-94dfc94e54dd' to '/modulith/customers/a9f62812-ae0b-4a54-a3e5-94dfc94e54dd' ==&gt; true cascaded=false matcher=Equality
2025-06-06T16:33:11.752506Z DEBUG tokio-runtime-worker pact_matching: expected content type = '*/*', actual content type = '*/*'
2025-06-06T16:33:11.752514Z DEBUG tokio-runtime-worker pact_matching: content type header matcher = 'RuleList { rules: [], rule_logic: And, cascaded: false }'
2025-06-06T16:33:11.752523Z DEBUG tokio-runtime-worker pact_matching::matchers: String -&gt; String: comparing 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token' to 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token' ==&gt; true cascaded=false matcher=Equality
2025-06-06T16:33:11.752527Z DEBUG tokio-runtime-worker pact_matching: --&gt; Mismatches: []
2025-06-06T16:33:11.752540Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Test context = {"mockServer": Object {"href": String("http://127.0.0.1:9222"), "port": Number(9222)}}
2025-06-06T16:33:11.752545Z  INFO tokio-runtime-worker pact_mock_server::hyper_server: Request matched, sending response HTTP Response ( status: 404, headers: None, body: Missing )</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="eac88e4a-b773-4a89-ad6c-c306659feb51" testId="30f0916c-2002-6742-05a4-a17fcf0e4449" testName="ECommerce.Pact.ConsumerTests.CustomerConsumerTests.CreateCustomer_ShouldReturnBadRequest_WhenMissingRequiredFields" computerName="KFV7CQCRXT" duration="00:00:00.0239040" startTime="2025-06-06T17:33:11.8186140+01:00" endTime="2025-06-06T17:33:11.8186140+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eac88e4a-b773-4a89-ad6c-c306659feb51">
      <Output>
        <StdOut>Mock driver logs:

2025-06-06T16:33:11.803177Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Creating pact request from hyper request
2025-06-06T16:33:11.803179Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Extracting query from uri /modulith/customers
2025-06-06T16:33:11.803199Z  INFO tokio-runtime-worker pact_mock_server::hyper_server: Received request HTTP Request ( method: POST, path: /modulith/customers, query: None, headers: Some({"authorization": ["Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token"], "content-length": ["26"], "content-type": ["application/json; charset=utf-8"], "host": ["127.0.0.1:9222"]}), body: Present(26 bytes, application/json;charset=utf-8) )
2025-06-06T16:33:11.803209Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server:      body: '{"name":null,"email":null}'
2025-06-06T16:33:11.803226Z  INFO tokio-runtime-worker pact_matching: comparing to expected HTTP Request ( method: POST, path: /modulith/customers, query: None, headers: Some({"Authorization": ["Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token"], "Content-Type": ["application/json"]}), body: Present(26 bytes, application/json) )
2025-06-06T16:33:11.803229Z DEBUG tokio-runtime-worker pact_matching:      body: '{"email":null,"name":null}'
2025-06-06T16:33:11.803230Z DEBUG tokio-runtime-worker pact_matching:      matching_rules: MatchingRules { rules: {BODY: MatchingRuleCategory { name: BODY, rules: {} }, PATH: MatchingRuleCategory { name: PATH, rules: {} }, HEADER: MatchingRuleCategory { name: HEADER, rules: {} }} }
2025-06-06T16:33:11.803232Z DEBUG tokio-runtime-worker pact_matching:      generators: Generators { categories: {} }
2025-06-06T16:33:11.803238Z DEBUG tokio-runtime-worker pact_matching::matchers: String -&gt; String: comparing '/modulith/customers' to '/modulith/customers' ==&gt; true cascaded=false matcher=Equality
2025-06-06T16:33:11.803241Z DEBUG tokio-runtime-worker pact_matching: expected content type = 'application/json', actual content type = 'application/json;charset=utf-8'
2025-06-06T16:33:11.803248Z DEBUG tokio-runtime-worker pact_matching: content type header matcher = 'RuleList { rules: [], rule_logic: And, cascaded: false }'
2025-06-06T16:33:11.803250Z DEBUG tokio-runtime-worker pact_plugin_driver::catalogue_manager: Looking for a content matcher for application/json
2025-06-06T16:33:11.803458Z DEBUG tokio-runtime-worker pact_matching: No content matcher defined for content type 'application/json', using core matcher implementation
2025-06-06T16:33:11.803460Z DEBUG tokio-runtime-worker pact_matching: Using body matcher for content type 'application/json'
2025-06-06T16:33:11.803464Z DEBUG tokio-runtime-worker pact_matching::json: compare: Comparing path $
2025-06-06T16:33:11.803466Z DEBUG tokio-runtime-worker pact_matching::json: compare_maps: Comparing maps at $: {"email": Null, "name": Null} -&gt; {"email": Null, "name": Null}
2025-06-06T16:33:11.803477Z DEBUG tokio-runtime-worker pact_matching::json: compare: Comparing path $.email
2025-06-06T16:33:11.803479Z DEBUG tokio-runtime-worker pact_matching::json: JSON -&gt; JSON: Comparing 'null' to 'null' using Equality -&gt; Ok(())
2025-06-06T16:33:11.803481Z DEBUG tokio-runtime-worker pact_matching::json: compare_values: Comparing 'Null' to 'Null' at path '$.email' -&gt; Ok(())
2025-06-06T16:33:11.803483Z DEBUG tokio-runtime-worker pact_matching::json: compare: Comparing path $.name
2025-06-06T16:33:11.803484Z DEBUG tokio-runtime-worker pact_matching::json: JSON -&gt; JSON: Comparing 'null' to 'null' using Equality -&gt; Ok(())
2025-06-06T16:33:11.803484Z DEBUG tokio-runtime-worker pact_matching::json: compare_values: Comparing 'Null' to 'Null' at path '$.name' -&gt; Ok(())
2025-06-06T16:33:11.803494Z DEBUG tokio-runtime-worker pact_matching::matchers: String -&gt; String: comparing 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token' to 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token' ==&gt; true cascaded=false matcher=Equality
2025-06-06T16:33:11.803506Z DEBUG tokio-runtime-worker pact_matching: --&gt; Mismatches: []
2025-06-06T16:33:11.803529Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Test context = {"mockServer": Object {"href": String("http://127.0.0.1:9222"), "port": Number(9222)}}
2025-06-06T16:33:11.803534Z  INFO tokio-runtime-worker pact_mock_server::hyper_server: Request matched, sending response HTTP Response ( status: 400, headers: Some({"Content-Type": ["application/json"]}), body: Present(18 bytes, application/json) )
2025-06-06T16:33:11.803536Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server:      body: '"Validation error"'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="171f383a-6e71-43e6-8fc7-a69889c8a604" testId="4f612012-67d5-99fd-f5d6-ba3dc16c4d88" testName="ECommerce.Pact.ConsumerTests.CustomerConsumerTests.GetAllCustomers_ShouldReturnUnauthorized_WhenNoAuthorizationProvided" computerName="KFV7CQCRXT" duration="00:00:00.0054680" startTime="2025-06-06T17:33:11.8242000+01:00" endTime="2025-06-06T17:33:11.8242000+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="171f383a-6e71-43e6-8fc7-a69889c8a604">
      <Output>
        <StdOut>Mock driver logs:

2025-06-06T16:33:11.820351Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Creating pact request from hyper request
2025-06-06T16:33:11.820354Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Extracting query from uri /modulith/customers
2025-06-06T16:33:11.820373Z  INFO tokio-runtime-worker pact_mock_server::hyper_server: Received request HTTP Request ( method: GET, path: /modulith/customers, query: None, headers: Some({"host": ["127.0.0.1:9222"]}), body: Empty )
2025-06-06T16:33:11.820386Z  INFO tokio-runtime-worker pact_matching: comparing to expected HTTP Request ( method: GET, path: /modulith/customers, query: None, headers: None, body: Missing )
2025-06-06T16:33:11.820388Z DEBUG tokio-runtime-worker pact_matching:      body: ''
2025-06-06T16:33:11.820389Z DEBUG tokio-runtime-worker pact_matching:      matching_rules: MatchingRules { rules: {PATH: MatchingRuleCategory { name: PATH, rules: {} }} }
2025-06-06T16:33:11.820391Z DEBUG tokio-runtime-worker pact_matching:      generators: Generators { categories: {} }
2025-06-06T16:33:11.820402Z DEBUG tokio-runtime-worker pact_matching::matchers: String -&gt; String: comparing '/modulith/customers' to '/modulith/customers' ==&gt; true cascaded=false matcher=Equality
2025-06-06T16:33:11.820405Z DEBUG tokio-runtime-worker pact_matching: expected content type = '*/*', actual content type = '*/*'
2025-06-06T16:33:11.820414Z DEBUG tokio-runtime-worker pact_matching: content type header matcher = 'RuleList { rules: [], rule_logic: And, cascaded: false }'
2025-06-06T16:33:11.820418Z DEBUG tokio-runtime-worker pact_matching: --&gt; Mismatches: []
2025-06-06T16:33:11.820431Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Test context = {"mockServer": Object {"href": String("http://127.0.0.1:9222"), "port": Number(9222)}}
2025-06-06T16:33:11.820436Z  INFO tokio-runtime-worker pact_mock_server::hyper_server: Request matched, sending response HTTP Response ( status: 401, headers: None, body: Missing )</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d8fe785d-0947-48b4-abea-e0a2555f0024" testId="796ce9b1-117f-55ef-4b1b-eb1866a9b88f" testName="ECommerce.Pact.ConsumerTests.CustomerConsumerTests.UpdateCustomer_ShouldReturnUnauthorized_WhenNoAuthorizationProvided" computerName="KFV7CQCRXT" duration="00:00:00.0060646" startTime="2025-06-06T17:33:11.8548750+01:00" endTime="2025-06-06T17:33:11.8548750+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d8fe785d-0947-48b4-abea-e0a2555f0024">
      <Output>
        <StdOut>Mock driver logs:

2025-06-06T16:33:11.839310Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Creating pact request from hyper request
2025-06-06T16:33:11.839312Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Extracting query from uri /modulith/customers/4d4b3a89-e887-462a-acd4-94b4fe20cecb
2025-06-06T16:33:11.839327Z  INFO tokio-runtime-worker pact_mock_server::hyper_server: Received request HTTP Request ( method: PUT, path: /modulith/customers/4d4b3a89-e887-462a-acd4-94b4fe20cecb, query: None, headers: Some({"host": ["127.0.0.1:9222"], "content-type": ["application/json; charset=utf-8"], "content-length": ["58"]}), body: Present(58 bytes, application/json;charset=utf-8) )
2025-06-06T16:33:11.839333Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server:      body: '{"name":"John Updated","email":"john.updated@example.com"}'
2025-06-06T16:33:11.839343Z  INFO tokio-runtime-worker pact_matching: comparing to expected HTTP Request ( method: PUT, path: /modulith/customers/4d4b3a89-e887-462a-acd4-94b4fe20cecb, query: None, headers: Some({"Content-Type": ["application/json"]}), body: Present(58 bytes, application/json) )
2025-06-06T16:33:11.839345Z DEBUG tokio-runtime-worker pact_matching:      body: '{"email":"john.updated@example.com","name":"John Updated"}'
2025-06-06T16:33:11.839346Z DEBUG tokio-runtime-worker pact_matching:      matching_rules: MatchingRules { rules: {HEADER: MatchingRuleCategory { name: HEADER, rules: {} }, BODY: MatchingRuleCategory { name: BODY, rules: {} }, PATH: MatchingRuleCategory { name: PATH, rules: {} }} }
2025-06-06T16:33:11.839348Z DEBUG tokio-runtime-worker pact_matching:      generators: Generators { categories: {} }
2025-06-06T16:33:11.839353Z DEBUG tokio-runtime-worker pact_matching::matchers: String -&gt; String: comparing '/modulith/customers/4d4b3a89-e887-462a-acd4-94b4fe20cecb' to '/modulith/customers/4d4b3a89-e887-462a-acd4-94b4fe20cecb' ==&gt; true cascaded=false matcher=Equality
2025-06-06T16:33:11.839355Z DEBUG tokio-runtime-worker pact_matching: expected content type = 'application/json', actual content type = 'application/json;charset=utf-8'
2025-06-06T16:33:11.839360Z DEBUG tokio-runtime-worker pact_matching: content type header matcher = 'RuleList { rules: [], rule_logic: And, cascaded: false }'
2025-06-06T16:33:11.839362Z DEBUG tokio-runtime-worker pact_plugin_driver::catalogue_manager: Looking for a content matcher for application/json
2025-06-06T16:33:11.839570Z DEBUG tokio-runtime-worker pact_matching: No content matcher defined for content type 'application/json', using core matcher implementation
2025-06-06T16:33:11.839572Z DEBUG tokio-runtime-worker pact_matching: Using body matcher for content type 'application/json'
2025-06-06T16:33:11.839576Z DEBUG tokio-runtime-worker pact_matching::json: compare: Comparing path $
2025-06-06T16:33:11.839578Z DEBUG tokio-runtime-worker pact_matching::json: compare_maps: Comparing maps at $: {"email": String("john.updated@example.com"), "name": String("John Updated")} -&gt; {"email": String("john.updated@example.com"), "name": String("John Updated")}
2025-06-06T16:33:11.839588Z DEBUG tokio-runtime-worker pact_matching::json: compare: Comparing path $.email
2025-06-06T16:33:11.839590Z DEBUG tokio-runtime-worker pact_matching::json: JSON -&gt; JSON: Comparing '"john.updated@example.com"' to '"john.updated@example.com"' using Equality -&gt; Ok(())
2025-06-06T16:33:11.839591Z DEBUG tokio-runtime-worker pact_matching::json: compare_values: Comparing 'String("john.updated@example.com")' to 'String("john.updated@example.com")' at path '$.email' -&gt; Ok(())
2025-06-06T16:33:11.839594Z DEBUG tokio-runtime-worker pact_matching::json: compare: Comparing path $.name
2025-06-06T16:33:11.839595Z DEBUG tokio-runtime-worker pact_matching::json: JSON -&gt; JSON: Comparing '"John Updated"' to '"John Updated"' using Equality -&gt; Ok(())
2025-06-06T16:33:11.839596Z DEBUG tokio-runtime-worker pact_matching::json: compare_values: Comparing 'String("John Updated")' to 'String("John Updated")' at path '$.name' -&gt; Ok(())
2025-06-06T16:33:11.839611Z DEBUG tokio-runtime-worker pact_matching: --&gt; Mismatches: []
2025-06-06T16:33:11.839626Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Test context = {"mockServer": Object {"href": String("http://127.0.0.1:9222"), "port": Number(9222)}}
2025-06-06T16:33:11.839629Z  INFO tokio-runtime-worker pact_mock_server::hyper_server: Request matched, sending response HTTP Response ( status: 401, headers: None, body: Missing )</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="56d3ff61-3d24-45f1-a98a-a2b858075414" testId="670e329f-9b78-062c-fa59-83079ff33e62" testName="ECommerce.Pact.ConsumerTests.CustomerConsumerTests.GetCustomerById_ShouldReturnCustomer_WhenCustomerExists" computerName="KFV7CQCRXT" duration="00:00:00.0063064" startTime="2025-06-06T17:33:11.7504020+01:00" endTime="2025-06-06T17:33:11.7504020+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="56d3ff61-3d24-45f1-a98a-a2b858075414">
      <Output>
        <StdOut>Mock driver logs:

2025-06-06T16:33:11.746320Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Creating pact request from hyper request
2025-06-06T16:33:11.746322Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Extracting query from uri /modulith/customers/d6d9f18c-8136-4623-83e0-e0a1640f7450
2025-06-06T16:33:11.746334Z  INFO tokio-runtime-worker pact_mock_server::hyper_server: Received request HTTP Request ( method: GET, path: /modulith/customers/d6d9f18c-8136-4623-83e0-e0a1640f7450, query: None, headers: Some({"host": ["127.0.0.1:9222"], "authorization": ["Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token"]}), body: Empty )
2025-06-06T16:33:11.746349Z  INFO tokio-runtime-worker pact_matching: comparing to expected HTTP Request ( method: GET, path: /modulith/customers/d6d9f18c-8136-4623-83e0-e0a1640f7450, query: None, headers: Some({"Authorization": ["Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token"]}), body: Missing )
2025-06-06T16:33:11.746351Z DEBUG tokio-runtime-worker pact_matching:      body: ''
2025-06-06T16:33:11.746352Z DEBUG tokio-runtime-worker pact_matching:      matching_rules: MatchingRules { rules: {HEADER: MatchingRuleCategory { name: HEADER, rules: {} }, PATH: MatchingRuleCategory { name: PATH, rules: {} }} }
2025-06-06T16:33:11.746355Z DEBUG tokio-runtime-worker pact_matching:      generators: Generators { categories: {} }
2025-06-06T16:33:11.746361Z DEBUG tokio-runtime-worker pact_matching::matchers: String -&gt; String: comparing '/modulith/customers/d6d9f18c-8136-4623-83e0-e0a1640f7450' to '/modulith/customers/d6d9f18c-8136-4623-83e0-e0a1640f7450' ==&gt; true cascaded=false matcher=Equality
2025-06-06T16:33:11.746364Z DEBUG tokio-runtime-worker pact_matching: expected content type = '*/*', actual content type = '*/*'
2025-06-06T16:33:11.746371Z DEBUG tokio-runtime-worker pact_matching: content type header matcher = 'RuleList { rules: [], rule_logic: And, cascaded: false }'
2025-06-06T16:33:11.746380Z DEBUG tokio-runtime-worker pact_matching::matchers: String -&gt; String: comparing 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token' to 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token' ==&gt; true cascaded=false matcher=Equality
2025-06-06T16:33:11.746384Z DEBUG tokio-runtime-worker pact_matching: --&gt; Mismatches: []
2025-06-06T16:33:11.746401Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Test context = {"mockServer": Object {"href": String("http://127.0.0.1:9222"), "port": Number(9222)}}
2025-06-06T16:33:11.746407Z  INFO tokio-runtime-worker pact_mock_server::hyper_server: Request matched, sending response HTTP Response ( status: 200, headers: Some({"Content-Type": ["application/json"]}), body: Present(94 bytes, application/json) )
2025-06-06T16:33:11.746409Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server:      body: '{"email":"john.doe@example.com","id":"d6d9f18c-8136-4623-83e0-e0a1640f7450","name":"John Doe"}'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="263ac6b4-1be1-4fe8-8fc3-aa29dd9f1455" testId="656abbc7-2544-40bc-dd87-5d09ba78875a" testName="ECommerce.Pact.ConsumerTests.CustomerConsumerTests.CreateCustomer_ShouldReturnCreatedCustomer_WhenValidCustomerIsProvided" computerName="KFV7CQCRXT" duration="00:00:00.0074783" startTime="2025-06-06T17:33:11.8375240+01:00" endTime="2025-06-06T17:33:11.8375240+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="263ac6b4-1be1-4fe8-8fc3-aa29dd9f1455">
      <Output>
        <StdOut>Mock driver logs:

2025-06-06T16:33:11.834458Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Creating pact request from hyper request
2025-06-06T16:33:11.834460Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Extracting query from uri /modulith/customers
2025-06-06T16:33:11.834480Z  INFO tokio-runtime-worker pact_mock_server::hyper_server: Received request HTTP Request ( method: POST, path: /modulith/customers, query: None, headers: Some({"host": ["127.0.0.1:9222"], "authorization": ["Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token"], "content-type": ["application/json; charset=utf-8"], "content-length": ["50"]}), body: Present(50 bytes, application/json;charset=utf-8) )
2025-06-06T16:33:11.834488Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server:      body: '{"name":"John Doe","email":"john.doe@example.com"}'
2025-06-06T16:33:11.834506Z  INFO tokio-runtime-worker pact_matching: comparing to expected HTTP Request ( method: POST, path: /modulith/customers, query: None, headers: Some({"Content-Type": ["application/json"], "Authorization": ["Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token"]}), body: Present(50 bytes, application/json) )
2025-06-06T16:33:11.834509Z DEBUG tokio-runtime-worker pact_matching:      body: '{"email":"john.doe@example.com","name":"John Doe"}'
2025-06-06T16:33:11.834509Z DEBUG tokio-runtime-worker pact_matching:      matching_rules: MatchingRules { rules: {BODY: MatchingRuleCategory { name: BODY, rules: {} }, PATH: MatchingRuleCategory { name: PATH, rules: {} }, HEADER: MatchingRuleCategory { name: HEADER, rules: {} }} }
2025-06-06T16:33:11.834512Z DEBUG tokio-runtime-worker pact_matching:      generators: Generators { categories: {} }
2025-06-06T16:33:11.834517Z DEBUG tokio-runtime-worker pact_matching::matchers: String -&gt; String: comparing '/modulith/customers' to '/modulith/customers' ==&gt; true cascaded=false matcher=Equality
2025-06-06T16:33:11.834520Z DEBUG tokio-runtime-worker pact_matching: expected content type = 'application/json', actual content type = 'application/json;charset=utf-8'
2025-06-06T16:33:11.834527Z DEBUG tokio-runtime-worker pact_matching: content type header matcher = 'RuleList { rules: [], rule_logic: And, cascaded: false }'
2025-06-06T16:33:11.834530Z DEBUG tokio-runtime-worker pact_plugin_driver::catalogue_manager: Looking for a content matcher for application/json
2025-06-06T16:33:11.834735Z DEBUG tokio-runtime-worker pact_matching: No content matcher defined for content type 'application/json', using core matcher implementation
2025-06-06T16:33:11.834737Z DEBUG tokio-runtime-worker pact_matching: Using body matcher for content type 'application/json'
2025-06-06T16:33:11.834742Z DEBUG tokio-runtime-worker pact_matching::json: compare: Comparing path $
2025-06-06T16:33:11.834743Z DEBUG tokio-runtime-worker pact_matching::json: compare_maps: Comparing maps at $: {"email": String("john.doe@example.com"), "name": String("John Doe")} -&gt; {"email": String("john.doe@example.com"), "name": String("John Doe")}
2025-06-06T16:33:11.834755Z DEBUG tokio-runtime-worker pact_matching::json: compare: Comparing path $.email
2025-06-06T16:33:11.834757Z DEBUG tokio-runtime-worker pact_matching::json: JSON -&gt; JSON: Comparing '"john.doe@example.com"' to '"john.doe@example.com"' using Equality -&gt; Ok(())
2025-06-06T16:33:11.834759Z DEBUG tokio-runtime-worker pact_matching::json: compare_values: Comparing 'String("john.doe@example.com")' to 'String("john.doe@example.com")' at path '$.email' -&gt; Ok(())
2025-06-06T16:33:11.834761Z DEBUG tokio-runtime-worker pact_matching::json: compare: Comparing path $.name
2025-06-06T16:33:11.834762Z DEBUG tokio-runtime-worker pact_matching::json: JSON -&gt; JSON: Comparing '"John Doe"' to '"John Doe"' using Equality -&gt; Ok(())
2025-06-06T16:33:11.834762Z DEBUG tokio-runtime-worker pact_matching::json: compare_values: Comparing 'String("John Doe")' to 'String("John Doe")' at path '$.name' -&gt; Ok(())
2025-06-06T16:33:11.834781Z DEBUG tokio-runtime-worker pact_matching::matchers: String -&gt; String: comparing 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token' to 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token' ==&gt; true cascaded=false matcher=Equality
2025-06-06T16:33:11.834785Z DEBUG tokio-runtime-worker pact_matching: --&gt; Mismatches: []
2025-06-06T16:33:11.834806Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Test context = {"mockServer": Object {"href": String("http://127.0.0.1:9222"), "port": Number(9222)}}
2025-06-06T16:33:11.834811Z  INFO tokio-runtime-worker pact_mock_server::hyper_server: Request matched, sending response HTTP Response ( status: 201, headers: Some({"Content-Type": ["application/json"]}), body: Present(94 bytes, application/json) )
2025-06-06T16:33:11.834814Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server:      body: '{"email":"john.doe@example.com","id":"cb3ff44a-7cc1-40d3-baeb-abca8b519be3","name":"John Doe"}'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a6d75cb9-ab31-4286-a69a-7fd806d8c6ea" testId="6c8f3472-1603-deb2-ba26-1438ccf47d9f" testName="ECommerce.Pact.ConsumerTests.CustomerConsumerTests.UpdateCustomer_ShouldReturnUpdatedCustomer_WhenValidUpdateIsProvided" computerName="KFV7CQCRXT" duration="00:00:00.0417836" startTime="2025-06-06T17:33:11.7439320+01:00" endTime="2025-06-06T17:33:11.7439320+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a6d75cb9-ab31-4286-a69a-7fd806d8c6ea">
      <Output>
        <StdOut>Mock driver logs:

2025-06-06T16:33:11.706757Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Creating pact request from hyper request
2025-06-06T16:33:11.706759Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Extracting query from uri /modulith/customers/6a116ca2-a2dc-43d8-9faf-5b39735eaf65
2025-06-06T16:33:11.706779Z  INFO tokio-runtime-worker pact_mock_server::hyper_server: Received request HTTP Request ( method: PUT, path: /modulith/customers/6a116ca2-a2dc-43d8-9faf-5b39735eaf65, query: None, headers: Some({"authorization": ["Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token"], "content-length": ["58"], "content-type": ["application/json; charset=utf-8"], "host": ["127.0.0.1:9222"]}), body: Present(58 bytes, application/json;charset=utf-8) )
2025-06-06T16:33:11.706787Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server:      body: '{"name":"John Updated","email":"john.updated@example.com"}'
2025-06-06T16:33:11.706805Z  INFO tokio-runtime-worker pact_matching: comparing to expected HTTP Request ( method: PUT, path: /modulith/customers/6a116ca2-a2dc-43d8-9faf-5b39735eaf65, query: None, headers: Some({"Content-Type": ["application/json"], "Authorization": ["Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token"]}), body: Present(58 bytes, application/json) )
2025-06-06T16:33:11.706808Z DEBUG tokio-runtime-worker pact_matching:      body: '{"email":"john.updated@example.com","name":"John Updated"}'
2025-06-06T16:33:11.706809Z DEBUG tokio-runtime-worker pact_matching:      matching_rules: MatchingRules { rules: {PATH: MatchingRuleCategory { name: PATH, rules: {} }, BODY: MatchingRuleCategory { name: BODY, rules: {} }, HEADER: MatchingRuleCategory { name: HEADER, rules: {} }} }
2025-06-06T16:33:11.706811Z DEBUG tokio-runtime-worker pact_matching:      generators: Generators { categories: {} }
2025-06-06T16:33:11.706817Z DEBUG tokio-runtime-worker pact_matching::matchers: String -&gt; String: comparing '/modulith/customers/6a116ca2-a2dc-43d8-9faf-5b39735eaf65' to '/modulith/customers/6a116ca2-a2dc-43d8-9faf-5b39735eaf65' ==&gt; true cascaded=false matcher=Equality
2025-06-06T16:33:11.706821Z DEBUG tokio-runtime-worker pact_matching: expected content type = 'application/json', actual content type = 'application/json;charset=utf-8'
2025-06-06T16:33:11.706828Z DEBUG tokio-runtime-worker pact_matching: content type header matcher = 'RuleList { rules: [], rule_logic: And, cascaded: false }'
2025-06-06T16:33:11.706831Z DEBUG tokio-runtime-worker pact_plugin_driver::catalogue_manager: Looking for a content matcher for application/json
2025-06-06T16:33:11.707029Z DEBUG tokio-runtime-worker pact_matching: No content matcher defined for content type 'application/json', using core matcher implementation
2025-06-06T16:33:11.707030Z DEBUG tokio-runtime-worker pact_matching: Using body matcher for content type 'application/json'
2025-06-06T16:33:11.707036Z DEBUG tokio-runtime-worker pact_matching::json: compare: Comparing path $
2025-06-06T16:33:11.707037Z DEBUG tokio-runtime-worker pact_matching::json: compare_maps: Comparing maps at $: {"email": String("john.updated@example.com"), "name": String("John Updated")} -&gt; {"email": String("john.updated@example.com"), "name": String("John Updated")}
2025-06-06T16:33:11.707049Z DEBUG tokio-runtime-worker pact_matching::json: compare: Comparing path $.email
2025-06-06T16:33:11.707051Z DEBUG tokio-runtime-worker pact_matching::json: JSON -&gt; JSON: Comparing '"john.updated@example.com"' to '"john.updated@example.com"' using Equality -&gt; Ok(())
2025-06-06T16:33:11.707053Z DEBUG tokio-runtime-worker pact_matching::json: compare_values: Comparing 'String("john.updated@example.com")' to 'String("john.updated@example.com")' at path '$.email' -&gt; Ok(())
2025-06-06T16:33:11.707055Z DEBUG tokio-runtime-worker pact_matching::json: compare: Comparing path $.name
2025-06-06T16:33:11.707056Z DEBUG tokio-runtime-worker pact_matching::json: JSON -&gt; JSON: Comparing '"John Updated"' to '"John Updated"' using Equality -&gt; Ok(())
2025-06-06T16:33:11.707057Z DEBUG tokio-runtime-worker pact_matching::json: compare_values: Comparing 'String("John Updated")' to 'String("John Updated")' at path '$.name' -&gt; Ok(())
2025-06-06T16:33:11.707075Z DEBUG tokio-runtime-worker pact_matching::matchers: String -&gt; String: comparing 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token' to 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token' ==&gt; true cascaded=false matcher=Equality
2025-06-06T16:33:11.707078Z DEBUG tokio-runtime-worker pact_matching: --&gt; Mismatches: []
2025-06-06T16:33:11.707096Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Test context = {"mockServer": Object {"href": String("http://127.0.0.1:9222"), "port": Number(9222)}}
2025-06-06T16:33:11.707100Z  INFO tokio-runtime-worker pact_mock_server::hyper_server: Request matched, sending response HTTP Response ( status: 200, headers: Some({"Content-Type": ["application/json"]}), body: Present(102 bytes, application/json) )
2025-06-06T16:33:11.707102Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server:      body: '{"email":"john.updated@example.com","id":"6a116ca2-a2dc-43d8-9faf-5b39735eaf65","name":"John Updated"}'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f9ee792d-9016-4e4a-a85b-88d74e0fd8c2" testId="15116b32-8381-1afe-4b70-8eeef66da874" testName="ECommerce.Pact.ConsumerTests.CustomerConsumerTests.UpdateCustomer_ShouldReturnNotFound_WhenCustomerDoesNotExist" computerName="KFV7CQCRXT" duration="00:00:00.0088721" startTime="2025-06-06T17:33:11.8669540+01:00" endTime="2025-06-06T17:33:11.8669540+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f9ee792d-9016-4e4a-a85b-88d74e0fd8c2">
      <Output>
        <StdOut>Mock driver logs:

2025-06-06T16:33:11.860008Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Creating pact request from hyper request
2025-06-06T16:33:11.860010Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Extracting query from uri /modulith/customers/f65c7fd1-d795-4bd2-a757-1807d9284c4e
2025-06-06T16:33:11.860030Z  INFO tokio-runtime-worker pact_mock_server::hyper_server: Received request HTTP Request ( method: PUT, path: /modulith/customers/f65c7fd1-d795-4bd2-a757-1807d9284c4e, query: None, headers: Some({"host": ["127.0.0.1:9222"], "authorization": ["Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token"], "content-type": ["application/json; charset=utf-8"], "content-length": ["58"]}), body: Present(58 bytes, application/json;charset=utf-8) )
2025-06-06T16:33:11.860039Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server:      body: '{"name":"John Updated","email":"john.updated@example.com"}'
2025-06-06T16:33:11.860051Z  INFO tokio-runtime-worker pact_matching: comparing to expected HTTP Request ( method: PUT, path: /modulith/customers/f65c7fd1-d795-4bd2-a757-1807d9284c4e, query: None, headers: Some({"Content-Type": ["application/json"], "Authorization": ["Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token"]}), body: Present(58 bytes, application/json) )
2025-06-06T16:33:11.860054Z DEBUG tokio-runtime-worker pact_matching:      body: '{"email":"john.updated@example.com","name":"John Updated"}'
2025-06-06T16:33:11.860054Z DEBUG tokio-runtime-worker pact_matching:      matching_rules: MatchingRules { rules: {PATH: MatchingRuleCategory { name: PATH, rules: {} }, BODY: MatchingRuleCategory { name: BODY, rules: {} }, HEADER: MatchingRuleCategory { name: HEADER, rules: {} }} }
2025-06-06T16:33:11.860057Z DEBUG tokio-runtime-worker pact_matching:      generators: Generators { categories: {} }
2025-06-06T16:33:11.860062Z DEBUG tokio-runtime-worker pact_matching::matchers: String -&gt; String: comparing '/modulith/customers/f65c7fd1-d795-4bd2-a757-1807d9284c4e' to '/modulith/customers/f65c7fd1-d795-4bd2-a757-1807d9284c4e' ==&gt; true cascaded=false matcher=Equality
2025-06-06T16:33:11.860066Z DEBUG tokio-runtime-worker pact_matching: expected content type = 'application/json', actual content type = 'application/json;charset=utf-8'
2025-06-06T16:33:11.860073Z DEBUG tokio-runtime-worker pact_matching: content type header matcher = 'RuleList { rules: [], rule_logic: And, cascaded: false }'
2025-06-06T16:33:11.860075Z DEBUG tokio-runtime-worker pact_plugin_driver::catalogue_manager: Looking for a content matcher for application/json
2025-06-06T16:33:11.860269Z DEBUG tokio-runtime-worker pact_matching: No content matcher defined for content type 'application/json', using core matcher implementation
2025-06-06T16:33:11.860270Z DEBUG tokio-runtime-worker pact_matching: Using body matcher for content type 'application/json'
2025-06-06T16:33:11.860276Z DEBUG tokio-runtime-worker pact_matching::json: compare: Comparing path $
2025-06-06T16:33:11.860277Z DEBUG tokio-runtime-worker pact_matching::json: compare_maps: Comparing maps at $: {"email": String("john.updated@example.com"), "name": String("John Updated")} -&gt; {"email": String("john.updated@example.com"), "name": String("John Updated")}
2025-06-06T16:33:11.860289Z DEBUG tokio-runtime-worker pact_matching::json: compare: Comparing path $.email
2025-06-06T16:33:11.860290Z DEBUG tokio-runtime-worker pact_matching::json: JSON -&gt; JSON: Comparing '"john.updated@example.com"' to '"john.updated@example.com"' using Equality -&gt; Ok(())
2025-06-06T16:33:11.860292Z DEBUG tokio-runtime-worker pact_matching::json: compare_values: Comparing 'String("john.updated@example.com")' to 'String("john.updated@example.com")' at path '$.email' -&gt; Ok(())
2025-06-06T16:33:11.860294Z DEBUG tokio-runtime-worker pact_matching::json: compare: Comparing path $.name
2025-06-06T16:33:11.860295Z DEBUG tokio-runtime-worker pact_matching::json: JSON -&gt; JSON: Comparing '"John Updated"' to '"John Updated"' using Equality -&gt; Ok(())
2025-06-06T16:33:11.860296Z DEBUG tokio-runtime-worker pact_matching::json: compare_values: Comparing 'String("John Updated")' to 'String("John Updated")' at path '$.name' -&gt; Ok(())
2025-06-06T16:33:11.860314Z DEBUG tokio-runtime-worker pact_matching::matchers: String -&gt; String: comparing 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token' to 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token' ==&gt; true cascaded=false matcher=Equality
2025-06-06T16:33:11.860317Z DEBUG tokio-runtime-worker pact_matching: --&gt; Mismatches: []
2025-06-06T16:33:11.860334Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Test context = {"mockServer": Object {"href": String("http://127.0.0.1:9222"), "port": Number(9222)}}
2025-06-06T16:33:11.860337Z  INFO tokio-runtime-worker pact_mock_server::hyper_server: Request matched, sending response HTTP Response ( status: 404, headers: None, body: Missing )</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b0b1cb88-a124-4d2d-b0b2-dd9aedd65636" testId="73486663-142b-8c78-3ac3-61681fa60717" testName="ECommerce.Pact.ConsumerTests.CustomerConsumerTests.GetAllCustomers_ShouldReturnListOfCustomers_WhenCustomersExist" computerName="KFV7CQCRXT" duration="00:00:00.0140819" startTime="2025-06-06T17:33:11.8579350+01:00" endTime="2025-06-06T17:33:11.8579350+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b0b1cb88-a124-4d2d-b0b2-dd9aedd65636">
      <Output>
        <StdOut>Mock driver logs:

2025-06-06T16:33:11.847524Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Creating pact request from hyper request
2025-06-06T16:33:11.847525Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Extracting query from uri /modulith/customers
2025-06-06T16:33:11.847535Z  INFO tokio-runtime-worker pact_mock_server::hyper_server: Received request HTTP Request ( method: GET, path: /modulith/customers, query: None, headers: Some({"host": ["127.0.0.1:9222"], "authorization": ["Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token"]}), body: Empty )
2025-06-06T16:33:11.847553Z  INFO tokio-runtime-worker pact_matching: comparing to expected HTTP Request ( method: GET, path: /modulith/customers, query: None, headers: Some({"Authorization": ["Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token"]}), body: Missing )
2025-06-06T16:33:11.847555Z DEBUG tokio-runtime-worker pact_matching:      body: ''
2025-06-06T16:33:11.847555Z DEBUG tokio-runtime-worker pact_matching:      matching_rules: MatchingRules { rules: {PATH: MatchingRuleCategory { name: PATH, rules: {} }, HEADER: MatchingRuleCategory { name: HEADER, rules: {} }} }
2025-06-06T16:33:11.847558Z DEBUG tokio-runtime-worker pact_matching:      generators: Generators { categories: {} }
2025-06-06T16:33:11.847562Z DEBUG tokio-runtime-worker pact_matching::matchers: String -&gt; String: comparing '/modulith/customers' to '/modulith/customers' ==&gt; true cascaded=false matcher=Equality
2025-06-06T16:33:11.847565Z DEBUG tokio-runtime-worker pact_matching: expected content type = '*/*', actual content type = '*/*'
2025-06-06T16:33:11.847570Z DEBUG tokio-runtime-worker pact_matching: content type header matcher = 'RuleList { rules: [], rule_logic: And, cascaded: false }'
2025-06-06T16:33:11.847578Z DEBUG tokio-runtime-worker pact_matching::matchers: String -&gt; String: comparing 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token' to 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token' ==&gt; true cascaded=false matcher=Equality
2025-06-06T16:33:11.847582Z DEBUG tokio-runtime-worker pact_matching: --&gt; Mismatches: []
2025-06-06T16:33:11.847600Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Test context = {"mockServer": Object {"href": String("http://127.0.0.1:9222"), "port": Number(9222)}}
2025-06-06T16:33:11.847605Z  INFO tokio-runtime-worker pact_mock_server::hyper_server: Request matched, sending response HTTP Response ( status: 200, headers: Some({"Content-Type": ["application/json"]}), body: Present(195 bytes, application/json) )
2025-06-06T16:33:11.847607Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server:      body: '[{"email":"john.doe@example.com","id":"4a11b1f8-7213-47ac-ac75-2e3f29ff104d","name":"John Doe"},{"email":"jane.smith@example.com","id":"53ae5f82-7914-471f-83c8-820e1aefb54d","name":"Jane Smith"}]'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="736c5bb1-9f46-4513-9f0c-604163146e48" testId="09d924ae-2038-8ce5-aa6f-c5773b42da4c" testName="ECommerce.Pact.ConsumerTests.CustomerConsumerTests.CreateCustomer_ShouldReturnUnauthorized_WhenNoAuthorizationProvided" computerName="KFV7CQCRXT" duration="00:00:00.0055662" startTime="2025-06-06T17:33:11.8299310+01:00" endTime="2025-06-06T17:33:11.8299320+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="736c5bb1-9f46-4513-9f0c-604163146e48">
      <Output>
        <StdOut>Mock driver logs:

2025-06-06T16:33:11.825602Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Creating pact request from hyper request
2025-06-06T16:33:11.825603Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Extracting query from uri /modulith/customers
2025-06-06T16:33:11.825616Z  INFO tokio-runtime-worker pact_mock_server::hyper_server: Received request HTTP Request ( method: POST, path: /modulith/customers, query: None, headers: Some({"host": ["127.0.0.1:9222"], "content-type": ["application/json; charset=utf-8"], "content-length": ["50"]}), body: Present(50 bytes, application/json;charset=utf-8) )
2025-06-06T16:33:11.825622Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server:      body: '{"name":"John Doe","email":"john.doe@example.com"}'
2025-06-06T16:33:11.825632Z  INFO tokio-runtime-worker pact_matching: comparing to expected HTTP Request ( method: POST, path: /modulith/customers, query: None, headers: Some({"Content-Type": ["application/json"]}), body: Present(50 bytes, application/json) )
2025-06-06T16:33:11.825634Z DEBUG tokio-runtime-worker pact_matching:      body: '{"email":"john.doe@example.com","name":"John Doe"}'
2025-06-06T16:33:11.825635Z DEBUG tokio-runtime-worker pact_matching:      matching_rules: MatchingRules { rules: {BODY: MatchingRuleCategory { name: BODY, rules: {} }, PATH: MatchingRuleCategory { name: PATH, rules: {} }, HEADER: MatchingRuleCategory { name: HEADER, rules: {} }} }
2025-06-06T16:33:11.825636Z DEBUG tokio-runtime-worker pact_matching:      generators: Generators { categories: {} }
2025-06-06T16:33:11.825640Z DEBUG tokio-runtime-worker pact_matching::matchers: String -&gt; String: comparing '/modulith/customers' to '/modulith/customers' ==&gt; true cascaded=false matcher=Equality
2025-06-06T16:33:11.825642Z DEBUG tokio-runtime-worker pact_matching: expected content type = 'application/json', actual content type = 'application/json;charset=utf-8'
2025-06-06T16:33:11.825648Z DEBUG tokio-runtime-worker pact_matching: content type header matcher = 'RuleList { rules: [], rule_logic: And, cascaded: false }'
2025-06-06T16:33:11.825650Z DEBUG tokio-runtime-worker pact_plugin_driver::catalogue_manager: Looking for a content matcher for application/json
2025-06-06T16:33:11.825861Z DEBUG tokio-runtime-worker pact_matching: No content matcher defined for content type 'application/json', using core matcher implementation
2025-06-06T16:33:11.825862Z DEBUG tokio-runtime-worker pact_matching: Using body matcher for content type 'application/json'
2025-06-06T16:33:11.825867Z DEBUG tokio-runtime-worker pact_matching::json: compare: Comparing path $
2025-06-06T16:33:11.825869Z DEBUG tokio-runtime-worker pact_matching::json: compare_maps: Comparing maps at $: {"email": String("john.doe@example.com"), "name": String("John Doe")} -&gt; {"email": String("john.doe@example.com"), "name": String("John Doe")}
2025-06-06T16:33:11.825881Z DEBUG tokio-runtime-worker pact_matching::json: compare: Comparing path $.email
2025-06-06T16:33:11.825883Z DEBUG tokio-runtime-worker pact_matching::json: JSON -&gt; JSON: Comparing '"john.doe@example.com"' to '"john.doe@example.com"' using Equality -&gt; Ok(())
2025-06-06T16:33:11.825885Z DEBUG tokio-runtime-worker pact_matching::json: compare_values: Comparing 'String("john.doe@example.com")' to 'String("john.doe@example.com")' at path '$.email' -&gt; Ok(())
2025-06-06T16:33:11.825888Z DEBUG tokio-runtime-worker pact_matching::json: compare: Comparing path $.name
2025-06-06T16:33:11.825889Z DEBUG tokio-runtime-worker pact_matching::json: JSON -&gt; JSON: Comparing '"John Doe"' to '"John Doe"' using Equality -&gt; Ok(())
2025-06-06T16:33:11.825890Z DEBUG tokio-runtime-worker pact_matching::json: compare_values: Comparing 'String("John Doe")' to 'String("John Doe")' at path '$.name' -&gt; Ok(())
2025-06-06T16:33:11.825907Z DEBUG tokio-runtime-worker pact_matching: --&gt; Mismatches: []
2025-06-06T16:33:11.825921Z DEBUG tokio-runtime-worker pact_mock_server::hyper_server: Test context = {"mockServer": Object {"href": String("http://127.0.0.1:9222"), "port": Number(9222)}}
2025-06-06T16:33:11.825924Z  INFO tokio-runtime-worker pact_mock_server::hyper_server: Request matched, sending response HTTP Response ( status: 401, headers: None, body: Missing )</StdOut>
      </Output>
    </UnitTestResult>
  </Results>
  <TestDefinitions>
    <UnitTest name="ECommerce.Pact.ConsumerTests.CustomerConsumerTests.GetAllCustomers_ShouldReturnListOfCustomers_WhenCustomersExist" storage="/users/iwanr/development/research/modular_monolith/modularmonolith/ecommerce.pact.consumertests/bin/debug/net8.0/ecommerce.pact.consumertests.dll" id="73486663-142b-8c78-3ac3-61681fa60717">
      <Execution id="b0b1cb88-a124-4d2d-b0b2-dd9aedd65636" />
      <TestMethod codeBase="/Users/iwanr/Development/Research/modular_monolith/ModularMonolith/ECommerce.Pact.ConsumerTests/bin/Debug/net8.0/ECommerce.Pact.ConsumerTests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="ECommerce.Pact.ConsumerTests.CustomerConsumerTests" name="GetAllCustomers_ShouldReturnListOfCustomers_WhenCustomersExist" />
    </UnitTest>
    <UnitTest name="ECommerce.Pact.ConsumerTests.CustomerConsumerTests.GetAllCustomers_ShouldReturnEmptyList_WhenNoCustomersExist" storage="/users/iwanr/development/research/modular_monolith/modularmonolith/ecommerce.pact.consumertests/bin/debug/net8.0/ecommerce.pact.consumertests.dll" id="b9ae3c40-f417-8888-87f6-6fc93cb2990b">
      <Execution id="fab6c1e8-c7c5-4e53-91f0-096796a519f6" />
      <TestMethod codeBase="/Users/iwanr/Development/Research/modular_monolith/ModularMonolith/ECommerce.Pact.ConsumerTests/bin/Debug/net8.0/ECommerce.Pact.ConsumerTests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="ECommerce.Pact.ConsumerTests.CustomerConsumerTests" name="GetAllCustomers_ShouldReturnEmptyList_WhenNoCustomersExist" />
    </UnitTest>
    <UnitTest name="ECommerce.Pact.ConsumerTests.CustomerConsumerTests.CreateCustomer_ShouldReturnUnauthorized_WhenNoAuthorizationProvided" storage="/users/iwanr/development/research/modular_monolith/modularmonolith/ecommerce.pact.consumertests/bin/debug/net8.0/ecommerce.pact.consumertests.dll" id="09d924ae-2038-8ce5-aa6f-c5773b42da4c">
      <Execution id="736c5bb1-9f46-4513-9f0c-604163146e48" />
      <TestMethod codeBase="/Users/iwanr/Development/Research/modular_monolith/ModularMonolith/ECommerce.Pact.ConsumerTests/bin/Debug/net8.0/ECommerce.Pact.ConsumerTests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="ECommerce.Pact.ConsumerTests.CustomerConsumerTests" name="CreateCustomer_ShouldReturnUnauthorized_WhenNoAuthorizationProvided" />
    </UnitTest>
    <UnitTest name="ECommerce.Pact.ConsumerTests.CustomerConsumerTests.CreateCustomer_ShouldReturnBadRequest_WhenMissingRequiredFields" storage="/users/iwanr/development/research/modular_monolith/modularmonolith/ecommerce.pact.consumertests/bin/debug/net8.0/ecommerce.pact.consumertests.dll" id="30f0916c-2002-6742-05a4-a17fcf0e4449">
      <Execution id="eac88e4a-b773-4a89-ad6c-c306659feb51" />
      <TestMethod codeBase="/Users/iwanr/Development/Research/modular_monolith/ModularMonolith/ECommerce.Pact.ConsumerTests/bin/Debug/net8.0/ECommerce.Pact.ConsumerTests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="ECommerce.Pact.ConsumerTests.CustomerConsumerTests" name="CreateCustomer_ShouldReturnBadRequest_WhenMissingRequiredFields" />
    </UnitTest>
    <UnitTest name="ECommerce.Pact.ConsumerTests.CustomerConsumerTests.CreateCustomer_ShouldReturnCreatedCustomer_WhenValidCustomerIsProvided" storage="/users/iwanr/development/research/modular_monolith/modularmonolith/ecommerce.pact.consumertests/bin/debug/net8.0/ecommerce.pact.consumertests.dll" id="656abbc7-2544-40bc-dd87-5d09ba78875a">
      <Execution id="263ac6b4-1be1-4fe8-8fc3-aa29dd9f1455" />
      <TestMethod codeBase="/Users/iwanr/Development/Research/modular_monolith/ModularMonolith/ECommerce.Pact.ConsumerTests/bin/Debug/net8.0/ECommerce.Pact.ConsumerTests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="ECommerce.Pact.ConsumerTests.CustomerConsumerTests" name="CreateCustomer_ShouldReturnCreatedCustomer_WhenValidCustomerIsProvided" />
    </UnitTest>
    <UnitTest name="ECommerce.Pact.ConsumerTests.CustomerConsumerTests.CreateCustomer_ShouldReturnBadRequest_WhenInvalidCustomerIsProvided" storage="/users/iwanr/development/research/modular_monolith/modularmonolith/ecommerce.pact.consumertests/bin/debug/net8.0/ecommerce.pact.consumertests.dll" id="f7cce972-ed99-cf06-afec-2ff3004f75bd">
      <Execution id="b3e217d4-33d5-43c6-8121-baab18257517" />
      <TestMethod codeBase="/Users/iwanr/Development/Research/modular_monolith/ModularMonolith/ECommerce.Pact.ConsumerTests/bin/Debug/net8.0/ECommerce.Pact.ConsumerTests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="ECommerce.Pact.ConsumerTests.CustomerConsumerTests" name="CreateCustomer_ShouldReturnBadRequest_WhenInvalidCustomerIsProvided" />
    </UnitTest>
    <UnitTest name="ECommerce.Pact.ConsumerTests.CustomerConsumerTests.GetCustomerById_ShouldReturnNotFound_WhenCustomerDoesNotExist" storage="/users/iwanr/development/research/modular_monolith/modularmonolith/ecommerce.pact.consumertests/bin/debug/net8.0/ecommerce.pact.consumertests.dll" id="d19df1d5-6ec7-07f6-16b4-e77b2fc8f297">
      <Execution id="b7acaca0-2e66-48a6-abf5-a9b259717d02" />
      <TestMethod codeBase="/Users/iwanr/Development/Research/modular_monolith/ModularMonolith/ECommerce.Pact.ConsumerTests/bin/Debug/net8.0/ECommerce.Pact.ConsumerTests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="ECommerce.Pact.ConsumerTests.CustomerConsumerTests" name="GetCustomerById_ShouldReturnNotFound_WhenCustomerDoesNotExist" />
    </UnitTest>
    <UnitTest name="ECommerce.Pact.ConsumerTests.CustomerConsumerTests.GetAllCustomers_ShouldReturnUnauthorized_WhenNoAuthorizationProvided" storage="/users/iwanr/development/research/modular_monolith/modularmonolith/ecommerce.pact.consumertests/bin/debug/net8.0/ecommerce.pact.consumertests.dll" id="4f612012-67d5-99fd-f5d6-ba3dc16c4d88">
      <Execution id="171f383a-6e71-43e6-8fc7-a69889c8a604" />
      <TestMethod codeBase="/Users/iwanr/Development/Research/modular_monolith/ModularMonolith/ECommerce.Pact.ConsumerTests/bin/Debug/net8.0/ECommerce.Pact.ConsumerTests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="ECommerce.Pact.ConsumerTests.CustomerConsumerTests" name="GetAllCustomers_ShouldReturnUnauthorized_WhenNoAuthorizationProvided" />
    </UnitTest>
    <UnitTest name="ECommerce.Pact.ConsumerTests.CustomerConsumerTests.GetCustomerById_ShouldReturnCustomer_WhenCustomerExists" storage="/users/iwanr/development/research/modular_monolith/modularmonolith/ecommerce.pact.consumertests/bin/debug/net8.0/ecommerce.pact.consumertests.dll" id="670e329f-9b78-062c-fa59-83079ff33e62">
      <Execution id="56d3ff61-3d24-45f1-a98a-a2b858075414" />
      <TestMethod codeBase="/Users/iwanr/Development/Research/modular_monolith/ModularMonolith/ECommerce.Pact.ConsumerTests/bin/Debug/net8.0/ECommerce.Pact.ConsumerTests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="ECommerce.Pact.ConsumerTests.CustomerConsumerTests" name="GetCustomerById_ShouldReturnCustomer_WhenCustomerExists" />
    </UnitTest>
    <UnitTest name="ECommerce.Pact.ConsumerTests.CustomerConsumerTests.UpdateCustomer_ShouldReturnUpdatedCustomer_WhenValidUpdateIsProvided" storage="/users/iwanr/development/research/modular_monolith/modularmonolith/ecommerce.pact.consumertests/bin/debug/net8.0/ecommerce.pact.consumertests.dll" id="6c8f3472-1603-deb2-ba26-1438ccf47d9f">
      <Execution id="a6d75cb9-ab31-4286-a69a-7fd806d8c6ea" />
      <TestMethod codeBase="/Users/iwanr/Development/Research/modular_monolith/ModularMonolith/ECommerce.Pact.ConsumerTests/bin/Debug/net8.0/ECommerce.Pact.ConsumerTests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="ECommerce.Pact.ConsumerTests.CustomerConsumerTests" name="UpdateCustomer_ShouldReturnUpdatedCustomer_WhenValidUpdateIsProvided" />
    </UnitTest>
    <UnitTest name="ECommerce.Pact.ConsumerTests.CustomerConsumerTests.UpdateCustomer_ShouldReturnUnauthorized_WhenNoAuthorizationProvided" storage="/users/iwanr/development/research/modular_monolith/modularmonolith/ecommerce.pact.consumertests/bin/debug/net8.0/ecommerce.pact.consumertests.dll" id="796ce9b1-117f-55ef-4b1b-eb1866a9b88f">
      <Execution id="d8fe785d-0947-48b4-abea-e0a2555f0024" />
      <TestMethod codeBase="/Users/iwanr/Development/Research/modular_monolith/ModularMonolith/ECommerce.Pact.ConsumerTests/bin/Debug/net8.0/ECommerce.Pact.ConsumerTests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="ECommerce.Pact.ConsumerTests.CustomerConsumerTests" name="UpdateCustomer_ShouldReturnUnauthorized_WhenNoAuthorizationProvided" />
    </UnitTest>
    <UnitTest name="ECommerce.Pact.ConsumerTests.CustomerConsumerTests.UpdateCustomer_ShouldReturnBadRequest_WhenInvalidDataProvided" storage="/users/iwanr/development/research/modular_monolith/modularmonolith/ecommerce.pact.consumertests/bin/debug/net8.0/ecommerce.pact.consumertests.dll" id="2378a2a8-282b-aebf-10c3-18e3198004e5">
      <Execution id="917efe4d-deec-4e36-bd61-bd510eb368c4" />
      <TestMethod codeBase="/Users/iwanr/Development/Research/modular_monolith/ModularMonolith/ECommerce.Pact.ConsumerTests/bin/Debug/net8.0/ECommerce.Pact.ConsumerTests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="ECommerce.Pact.ConsumerTests.CustomerConsumerTests" name="UpdateCustomer_ShouldReturnBadRequest_WhenInvalidDataProvided" />
    </UnitTest>
    <UnitTest name="ECommerce.Pact.ConsumerTests.CustomerConsumerTests.UpdateCustomer_ShouldReturnNotFound_WhenCustomerDoesNotExist" storage="/users/iwanr/development/research/modular_monolith/modularmonolith/ecommerce.pact.consumertests/bin/debug/net8.0/ecommerce.pact.consumertests.dll" id="15116b32-8381-1afe-4b70-8eeef66da874">
      <Execution id="f9ee792d-9016-4e4a-a85b-88d74e0fd8c2" />
      <TestMethod codeBase="/Users/iwanr/Development/Research/modular_monolith/ModularMonolith/ECommerce.Pact.ConsumerTests/bin/Debug/net8.0/ECommerce.Pact.ConsumerTests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="ECommerce.Pact.ConsumerTests.CustomerConsumerTests" name="UpdateCustomer_ShouldReturnNotFound_WhenCustomerDoesNotExist" />
    </UnitTest>
    <UnitTest name="ECommerce.Pact.ConsumerTests.CustomerConsumerTests.GetCustomerById_ShouldReturnUnauthorized_WhenNoAuthorizationProvided" storage="/users/iwanr/development/research/modular_monolith/modularmonolith/ecommerce.pact.consumertests/bin/debug/net8.0/ecommerce.pact.consumertests.dll" id="8a35a436-f559-8731-3662-d4c52c540b62">
      <Execution id="29745fab-7c41-4bc3-b812-f6b9f72e5f5e" />
      <TestMethod codeBase="/Users/iwanr/Development/Research/modular_monolith/ModularMonolith/ECommerce.Pact.ConsumerTests/bin/Debug/net8.0/ECommerce.Pact.ConsumerTests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="ECommerce.Pact.ConsumerTests.CustomerConsumerTests" name="GetCustomerById_ShouldReturnUnauthorized_WhenNoAuthorizationProvided" />
    </UnitTest>
  </TestDefinitions>
  <TestEntries>
    <TestEntry testId="b9ae3c40-f417-8888-87f6-6fc93cb2990b" executionId="fab6c1e8-c7c5-4e53-91f0-096796a519f6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2378a2a8-282b-aebf-10c3-18e3198004e5" executionId="917efe4d-deec-4e36-bd61-bd510eb368c4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8a35a436-f559-8731-3662-d4c52c540b62" executionId="29745fab-7c41-4bc3-b812-f6b9f72e5f5e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f7cce972-ed99-cf06-afec-2ff3004f75bd" executionId="b3e217d4-33d5-43c6-8121-baab18257517" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d19df1d5-6ec7-07f6-16b4-e77b2fc8f297" executionId="b7acaca0-2e66-48a6-abf5-a9b259717d02" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="30f0916c-2002-6742-05a4-a17fcf0e4449" executionId="eac88e4a-b773-4a89-ad6c-c306659feb51" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4f612012-67d5-99fd-f5d6-ba3dc16c4d88" executionId="171f383a-6e71-43e6-8fc7-a69889c8a604" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="796ce9b1-117f-55ef-4b1b-eb1866a9b88f" executionId="d8fe785d-0947-48b4-abea-e0a2555f0024" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="670e329f-9b78-062c-fa59-83079ff33e62" executionId="56d3ff61-3d24-45f1-a98a-a2b858075414" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="656abbc7-2544-40bc-dd87-5d09ba78875a" executionId="263ac6b4-1be1-4fe8-8fc3-aa29dd9f1455" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6c8f3472-1603-deb2-ba26-1438ccf47d9f" executionId="a6d75cb9-ab31-4286-a69a-7fd806d8c6ea" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="15116b32-8381-1afe-4b70-8eeef66da874" executionId="f9ee792d-9016-4e4a-a85b-88d74e0fd8c2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="73486663-142b-8c78-3ac3-61681fa60717" executionId="b0b1cb88-a124-4d2d-b0b2-dd9aedd65636" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="09d924ae-2038-8ce5-aa6f-c5773b42da4c" executionId="736c5bb1-9f46-4513-9f0c-604163146e48" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <ResultSummary outcome="Completed">
    <Counters total="14" executed="14" passed="14" failed="0" error="0" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" completed="0" inProgress="0" pending="0" />
    <Output>
      <StdOut>[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v2.5.3.1+6b60a9e56a (64-bit .NET 8.0.16)
[xUnit.net 00:00:00.08]   Discovering: ECommerce.Pact.ConsumerTests
[xUnit.net 00:00:00.13]   Discovered:  ECommerce.Pact.ConsumerTests
[xUnit.net 00:00:00.13]   Starting:    ECommerce.Pact.ConsumerTests
[xUnit.net 00:00:01.48]   Finished:    ECommerce.Pact.ConsumerTests
</StdOut>
    </Output>
  </ResultSummary>
</TestRun>