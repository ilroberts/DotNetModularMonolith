@page "{id:guid}"
@model ECommerce.AdminUI.Pages.Orders.EditModel
@{
    ViewData["Title"] = "Edit Order";
}

<h1>Edit Order</h1>
<hr />

<div class="row">
    <div class="col-md-8">
        <form method="post">
            <input type="hidden" asp-for="Order.Id" />
            <input type="hidden" asp-for="Order.CustomerId" />
            <input type="hidden" asp-for="Order.CustomerName" />
            <input type="hidden" asp-for="Order.CustomerEmail" />
            <input type="hidden" asp-for="Order.CreatedAt" />

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Customer Information</h5>
                </div>
                <div class="card-body">
                    <dl class="row mb-0">
                        <dt class="col-sm-3">Customer</dt>
                        <dd class="col-sm-9">@Model.Order.CustomerName</dd>

                        <dt class="col-sm-3">Email</dt>
                        <dd class="col-sm-9">@Model.Order.CustomerEmail</dd>
                    </dl>
                </div>
            </div>

            <div class="mb-3">
                <label asp-for="Order.ProductId" class="form-label">Product</label>
                <select asp-for="Order.ProductId" id="productSelect" class="form-select" asp-items="Model.ProductOptions"
                        onchange="updateProductInfo(); calculateTotal();">
                    <option value="">-- Select Product --</option>
                </select>
                <span asp-validation-for="Order.ProductId" class="text-danger"></span>
            </div>

            <div class="mb-3">
                <label asp-for="Order.Quantity" class="form-label">Quantity</label>
                <div class="input-group">
                    <input asp-for="Order.Quantity" id="quantity" class="form-control" type="number" min="1"
                           onchange="calculateTotal();" oninput="calculateTotal();" />
                    <span class="input-group-text" id="stockInfo">(in stock)</span>
                </div>
                <span asp-validation-for="Order.Quantity" class="text-danger"></span>
                <div id="quantityFeedback" class="invalid-feedback"></div>
            </div>

            <div class="mb-3">
                <label class="form-label">Total Price</label>
                <div class="input-group">
                    <span class="input-group-text">$</span>
                    <input id="totalPrice" class="form-control" readonly />
                </div>
            </div>

            <div class="mb-3">
                <label asp-for="Order.Status" class="form-label">Status</label>
                <select asp-for="Order.Status" class="form-select">
                    <option value="Pending">Pending</option>
                    <option value="Processing">Processing</option>
                    <option value="Completed">Completed</option>
                    <option value="Cancelled">Cancelled</option>
                </select>
                <span asp-validation-for="Order.Status" class="text-danger"></span>
            </div>

            <input type="hidden" id="productPrice" />
            <input type="hidden" asp-for="Order.ProductName" id="productName" />
            <input type="hidden" asp-for="Order.ProductPrice" id="productUnitPrice" />
            <input type="hidden" asp-for="Order.TotalPrice" id="orderTotalPrice" />

            <div class="mb-3">
                <button type="submit" class="btn btn-primary">Save Changes</button>
                <a asp-page="./Index" class="btn btn-secondary">Cancel</a>
            </div>
        </form>
    </div>

    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5>Order Summary</h5>
            </div>
            <div class="card-body">
                <div id="orderSummary">
                    <p><strong>Customer:</strong> @Model.Order.CustomerName</p>
                    <p><strong>Product:</strong> <span id="summaryProductName">@Model.Order.ProductName</span></p>
                    <p><strong>Quantity:</strong> <span id="summaryQuantity">@Model.Order.Quantity</span></p>
                    <p><strong>Total:</strong> $<span id="summaryTotal">@Model.Order.TotalPrice.ToString("0.00")</span></p>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        // Store product data for client-side calculations
        const products = @Html.Raw(Json.Serialize(Model.ProductData));

        function getSelectedProduct() {
            const productId = document.getElementById('productSelect').value;
            return products.find(p => p.id === productId);
        }

        function updateProductInfo() {
            const product = getSelectedProduct();
            const stockInfo = document.getElementById('stockInfo');
            const productPrice = document.getElementById('productPrice');
            const productNameField = document.getElementById('productName');
            const productUnitPriceField = document.getElementById('productUnitPrice');

            if (product) {
                stockInfo.textContent = `(${product.stock} in stock)`;
                productPrice.value = product.price;
                productNameField.value = product.name;
                productUnitPriceField.value = product.price;

                // Update summary product name
                document.getElementById('summaryProductName').textContent = product.name;

                // Set max quantity to available stock
                document.getElementById('quantity').max = product.stock;
            } else {
                stockInfo.textContent = '(in stock)';
                productPrice.value = 0;
            }
        }

        function calculateTotal() {
            const quantity = parseInt(document.getElementById('quantity').value) || 0;
            const price = parseFloat(document.getElementById('productPrice').value) || 0;

            // Validate quantity against stock
            const product = getSelectedProduct();
            const quantityInput = document.getElementById('quantity');
            const feedback = document.getElementById('quantityFeedback');

            if (product && quantity > product.stock) {
                quantityInput.classList.add('is-invalid');
                feedback.textContent = `Maximum available quantity is ${product.stock}`;
                quantityInput.value = product.stock;
            } else if (quantity < 1) {
                quantityInput.classList.add('is-invalid');
                feedback.textContent = 'Minimum quantity is 1';
                quantityInput.value = 1;
            } else {
                quantityInput.classList.remove('is-invalid');
            }

            const total = quantity * price;
            document.getElementById('totalPrice').value = total.toFixed(2);
            document.getElementById('orderTotalPrice').value = total;

            // Update summary
            document.getElementById('summaryQuantity').textContent = quantity;
            document.getElementById('summaryTotal').textContent = total.toFixed(2);
        }

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            updateProductInfo();
            calculateTotal();
        });
    </script>
}
