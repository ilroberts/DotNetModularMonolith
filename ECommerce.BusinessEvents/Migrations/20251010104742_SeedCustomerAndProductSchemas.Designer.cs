// <auto-generated />
using System;
using ECommerce.BusinessEvents.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ECommerce.BusinessEvents.Migrations
{
    [DbContext(typeof(BusinessEventDbContext))]
    [Migration("20251010104742_SeedCustomerAndProductSchemas")]
    partial class SeedCustomerAndProductSchemas
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ECommerce.BusinessEvents.Domain.BusinessEvent", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ActorType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CorrelationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EntityData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("EventTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SchemaVersion")
                        .HasColumnType("integer");

                    b.HasKey("EventId");

                    b.HasIndex("EntityType", "EntityId", "EventTimestamp");

                    b.ToTable("BusinessEvents");
                });

            modelBuilder.Entity("ECommerce.BusinessEvents.Domain.BusinessEventMetadata", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<string>("MetadataKey")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(1);

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("MetadataValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("EventId", "MetadataKey");

                    b.HasIndex("MetadataKey", "MetadataValue")
                        .HasDatabaseName("IX_BusinessEventMetadata_Key_Value");

                    b.HasIndex("EntityType", "EntityId", "MetadataKey")
                        .HasDatabaseName("IX_BusinessEventMetadata_Entity");

                    b.ToTable("BusinessEventMetadata");
                });

            modelBuilder.Entity("ModularMonolith.Domain.BusinessEvents.SchemaVersion", b =>
                {
                    b.Property<string>("EntityType")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SchemaDefinition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EntityType", "Version");

                    b.ToTable("SchemaVersions");

                    b.HasData(
                        new
                        {
                            EntityType = "Customer",
                            Version = 1,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SchemaDefinition = "{\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"$id\": \"https://example.com/schemas/customer/v1\",\n    \"title\": \"Customer\",\n    \"description\": \"A customer entity\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"Id\": {\n            \"type\": \"string\",\n            \"description\": \"Unique customer identifier\",\n            \"x-metadata\": true\n        },\n        \"Name\": {\n            \"type\": \"string\",\n            \"description\": \"Customer's name\",\n            \"x-metadata\": true\n        },\n        \"Email\": {\n            \"type\": \"string\",\n            \"format\": \"email\",\n            \"description\": \"Customer's email address\",\n            \"x-metadata\": true\n        },\n        \"Phone\": {\n            \"type\": \"string\",\n            \"description\": \"Customer's phone number\"\n        },\n        \"DateOfBirth\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"Customer's date of birth\"\n        },\n        \"CreatedAt\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"When the customer was created\",\n            \"x-metadata\": true\n        },\n        \"UpdatedAt\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"When the customer was last updated\",\n            \"x-metadata\": true\n        }\n    },\n    \"required\": [\"Id\", \"Name\", \"Email\"],\n    \"additionalProperties\": false\n}\n"
                        },
                        new
                        {
                            EntityType = "Product",
                            Version = 1,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SchemaDefinition = "{\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"$id\": \"https://example.com/schemas/product/v1\",\n    \"title\": \"Product\",\n    \"description\": \"A product entity\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"Id\": {\n            \"type\": \"string\",\n            \"description\": \"Unique product identifier\",\n            \"x-metadata\": true\n        },\n        \"Name\": {\n            \"type\": \"string\",\n            \"description\": \"Product name\",\n            \"x-metadata\": true\n        },\n        \"Price\": {\n            \"type\": \"number\",\n            \"format\": \"decimal\",\n            \"description\": \"Product price\",\n            \"x-metadata\": true\n        }\n    },\n    \"required\": [\"Id\", \"Name\", \"Price\"],\n    \"additionalProperties\": false\n}\n"
                        });
                });

            modelBuilder.Entity("ECommerce.BusinessEvents.Domain.BusinessEventMetadata", b =>
                {
                    b.HasOne("ECommerce.BusinessEvents.Domain.BusinessEvent", "BusinessEvent")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessEvent");
                });
#pragma warning restore 612, 618
        }
    }
}
