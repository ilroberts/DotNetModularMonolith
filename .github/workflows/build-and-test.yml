name: Build and Test Docker Images

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore ModularMonolith.sln

      - name: Build solution
        run: dotnet build ModularMonolith.sln --no-restore --configuration Release

      - name: Run tests
        run: |
          dotnet test ECommerceApp.IntegrationTests/ECommerceApp.IntegrationTests.csproj --no-build --configuration Release --logger "trx;LogFileName=test_results.trx"
          dotnet test ECommerce.AdminUI.IntegrationTests/ECommerce.AdminUI.IntegrationTests.csproj --no-build --configuration Release --logger "trx;LogFileName=adminui_test_results.trx"
          dotnet test ECommerce.Modules.Orders.Tests/ECommerce.Modules.Orders.Tests.csproj --no-build --configuration Release --logger "trx;LogFileName=orders_test_results.trx"
          dotnet test ECommerce.BusinessEvents.Tests/ECommerce.BusinessEvents.Tests.csproj --no-build --configuration Release --logger "trx;LogFileName=businessevents_test_results.trx"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ECommerceApp Docker image
        run: |
          if [ -f ./ECommerceApp/Dockerfile ]; then
            docker build -t ecommerceapp:latest -f ECommerceApp/Dockerfile .
          else
            echo "ECommerceApp Dockerfile not found, skipping build."
          fi

      - name: Build ECommerce.AdminUI Docker image
        run: |
          if [ -f ./ECommerce.AdminUI/Dockerfile ]; then
            docker build -t ecommerceadminui:latest -f ECommerce.AdminUI/Dockerfile .
          else
            echo "ECommerce.AdminUI Dockerfile not found, skipping build."
          fi

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.ACCESS_TOKEN }}

      - name: Tag and push ECommerceApp image
        run: |
          docker tag ecommerceapp:latest ghcr.io/${{ github.repository_owner }}/ecommerceapp:latest
          docker tag ecommerceapp:latest ghcr.io/${{ github.repository_owner }}/ecommerceapp:${{ github.sha }}
          docker push ghcr.io/${{ github.repository_owner }}/ecommerceapp:latest
          docker push ghcr.io/${{ github.repository_owner }}/ecommerceapp:${{ github.sha }}

      - name: Tag and push ECommerce.AdminUI image
        run: |
          docker tag ecommerceadminui:latest ghcr.io/${{ github.repository_owner }}/ecommerceadminui:latest
          docker tag ecommerceadminui:latest ghcr.io/${{ github.repository_owner }}/ecommerceadminui:${{ github.sha }}
          docker push ghcr.io/${{ github.repository_owner }}/ecommerceadminui:latest
          docker push ghcr.io/${{ github.repository_owner }}/ecommerceadminui:${{ github.sha }}

  deploy-mock:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' # Only deploy on main, adjust as needed
    env:
      IMAGE_TAG: ${{ github.sha }}
      ENVIRONMENT: ${{ inputs.environment || 'dev' }}
    steps:
      - name: Show deployment parameters
        run: |
          echo "Mock Deploying to environment: $ENVIRONMENT"
          echo "Using image tag: $IMAGE_TAG"
          echo "Would deploy ghcr.io/${{ github.repository_owner }}/ecommerceapp:${IMAGE_TAG}"
          echo "Would deploy ghcr.io/${{ github.repository_owner }}/ecommerceadminui:${IMAGE_TAG}"

      - name: Simulate deployment script
        run: |
          echo "kubectl apply -f k8s/deployment.yaml --dry-run=client"
          # Add any commands you want to 'mock' here

      - name: Confirm mock deployment success
        run: echo "Mock deployment completed successfully."
